-# frozen_string_literal: true

- current = @photos.current.decorate
- size = current.image_size(preview_id, apply_rotation: true)
- content_for :title, current.name

.photo-mobile-header
  = link_to root_path, class: 'photo-header-root' do
    span
  = link_to @rubric.name, page_path(@rubric), title: @rubric.name

.photo-header
  - if @photos.prev.present?
    = link_to '', page_photo_path(@rubric, @photos.prev), class: 'photo-arrow photo-arrow-left',
                                                          title: @photos.prev.name
  - else
    span.nav-stub.photo-arrow.photo-arrow-left

  ul
    li
      = link_to t('title'), root_path
    - @rubric.rubrics_tree.reverse_each do |rubric|
      li
        = link_to rubric.name, page_path(rubric)
    li.photo-caption*{title: current.name}
      = current.name

  .photo-header-buttons
    - if @photos.next.present?
      - slideshow = params[:next].present?
      = link_to '',
                page_photo_path(@rubric, current, next: slideshow ? nil : Rails.application.config.slideshow_delay),
                class: ['slideshow-link', slideshow ? 'active' : nil].compact.join(' '),
                title: slideshow ? t('.slideshow_stop') : t('.slideshow')

    = select_tag :preview_id, photo_size_selector_opts(preview_id)

  - if @photos.next.present?
    = link_to '', page_photo_path(@rubric, @photos.next), class: 'photo-arrow photo-arrow-right',
                                                          title: @photos.next.name
  - else
    span.nav-stub.photo-arrow.photo-arrow-right

.photo-page
  .photo-content *{data: {end: @rubric.photos_count - current.pos}}
    - if @photos.prev.present?
      = link_to '', page_photo_path(@rubric, @photos.prev), class: 'photo-arrow photo-arrow-left',
                                                            title: @photos.prev.name
    - else
      span.nav-stub.photo-arrow.photo-arrow-left

    - if current.turned?
      css:
        @media (max-width: 992px) {
          #photo_#{current.id} {
            height: #{100.0 * size.last / size.first}vw !important;
          }
        }

    .photo-content-image class=('rotated' if current.turned?) *{style: "width: #{size.first}px; height: #{size.last}px", id: "photo_#{current.id}"}
      - if current.video?
        video.video-js#main_video*{controls: true, autoplay: :play, preload: :auto, poster: current.proxy_url(preview_id), width: size.first, height: size.last}
          source*{src: current.proxy_url(:video_preview), type: current.content_type}
      - else
        - transform = current.css_transform
        = image_tag image_url('throbber.gif'), id: 'throbber'
        = image_tag current.proxy_url(preview_id),
                    id: 'mainimg',
                    style: transform ? "transform: #{transform}" : nil

    - if @photos.next.present?
      = link_to '', page_photo_path(@rubric, @photos.next), class: 'photo-arrow photo-arrow-right',
                                                            title: @photos.next.name
    - else
      span.nav-stub.photo-arrow.photo-arrow-right

  .photo-sidebar
    - if current.lat_long.present?
      - lat_long = current.lat_long.to_a
      = map(center: {latlng: lat_long, zoom: Leaflet.max_zoom})
      javascript:
        marker = L.marker(#{lat_long.to_a}).on('click', onClick).addTo(map);

        function onClick(e) {
            window.open('https://www.openstreetmap.org/?mlat=#{lat_long.first}&mlon=#{lat_long.last}#map=#{Leaflet.max_zoom}/#{lat_long.first}/#{lat_long.last}', '_blank')
        }

    .photo-info
      table
        - if current.original_timestamp.present?
          tr*{title: t('.ago_in_words', time: time_ago_in_words(current.original_timestamp))}
            th
              = t('.original_timestamp')
            td
              = current.original_timestamp&.to_fs
          tr
            th
              = t('.tz')
            td
              = current.tz

        - if current.exif.present?
          tr
            th
              = t('.camera')
            td
              = "#{current.exif['make']} #{current.exif['model']}"

        - if current.duration.present?
          tr
            th
              = t('.duration')
            td
              = Formatters::Duration.new(current.duration, include_seconds: true).call

        tr
          th
            = t('.created_at')
          td
            = current.created_at.to_fs

        tr
          th
            = t('.size')
          td
            = number_to_human_size(current.size)

        tr
          th
            = t('.original_download')
          td
            = link_to t('.download'), current.proxy_url, target: '_blank', title: current.original_filename

        tr
          th
            = t('.views')
          td.views-counter
            = current.views + current.inc_counter

        tr
          th
            = t('.original_filename')
          td
            = current.original_filename

        tr
          th
            = t('.resolution')
          td
            = "#{current.width}x#{current.height}"

        tr
          th
            = t('.position')
          td
            = t('.position_value', pos: current.pos, count: @rubric.photos_count)

      p.photo-description
        = current.description

      - if current_user.admin?
        .photo-buttons
          a.cart-selector*{title: t('.add_to_cart'), class: in_cart?(current) ? 'selected' : '', data: {url: api_v1_admin_photos_cart_path(current)}}
          - unless current.id == @rubric.main_photo_id
            = link_to '', '#', class: 'photo-set-main-button', title: t('.set_main_photo'),
                               data: {confirm: t('.set_main_photo_confirm'), photo_id: current.id, url: api_v1_admin_rubric_path(@rubric) }
          = link_to '', edit_admin_photo_path(current), class: 'photo-edit-button', title: t('.edit'), target: '_blank'
