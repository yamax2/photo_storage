version: '3.9'

services:
  app: &app
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        DOCKER_RUBY_VERSION: $DOCKER_RUBY_VERSION
    environment:
      - BUNDLE_PATH=/bundle/${DOCKER_RUBY_VERSION}
      - SSH_AUTH_SOCK=/ssh/auth/sock
      - RAILS_ENV=$RAILS_ENV
      - LOG_LEVEL=$LOG_LEVEL
      - PHOTOSTORAGE_SMTP_USER=auto@tretyakov-ma.ru
    depends_on:
      - db
      - redis
    # dns: $DIP_DNS
    volumes:
      - ..:/app
      - ../../gems:/localgems
      # - ssh-data:/ssh:ro
      - bundler-data:/bundle
    networks:
      - default
      - frontend
    command: sh

  web:
    <<: *app
    command: 'sh -c "rm -f /var/run/rails.pid && bundle exec rails s -p 80 -b 0.0.0.0 --pid /var/run/rails.pid"'
    expose:
      - "80"
    stdin_open: true
    tty: true
    depends_on:
      - db
      - redis
      - proxy
    environment:
      - BUNDLE_PATH=/bundle/${DOCKER_RUBY_VERSION}
      - SSH_AUTH_SOCK=/ssh/auth/sock
      - RAILS_ENV=$RAILS_ENV
      - LOG_LEVEL=$LOG_LEVEL
      - RAILS_SERVE_STATIC_FILES=$RAILS_SERVE_STATIC_FILES
      - VIRTUAL_HOST=photostorage.$DOCKER_TLD
      - VIRTUAL_PATH=/

  sidekiq:
    <<: *app
    command: 'bundle exec sidekiq -C config/sidekiq.yml'

  db:
    image: postgres:${POSTGRES_IMAGE_TAG}-alpine
    environment:
      - POSTGRES_DB=photos
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./configs/dumps/$RAILS_ENV/pg:/docker-entrypoint-initdb.d:ro

  redis:
    image: redis:${REDIS_IMAGE_TAG}-alpine
    volumes:
      - redis-data:/data

  proxy:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.proxy
      args:
        DOCKER_GO_VERSION: $DOCKER_GO_VERSION
      labels:
        com.photo-storage.go.version: $DOCKER_GO_VERSION
    volumes:
      - ../proxy_service:/app
    command: 'go run proxy_service.go -listen=0.0.0.0:9000'
    expose:
      - '9000'
    networks:
      - default
      - frontend
    # deploy:
    #  replicas: 2
    dns: $DIP_DNS
    environment:
      - VIRTUAL_HOST=photostorage.$DOCKER_TLD
      - VIRTUAL_PATH=/proxy/
      - LOG_LEVEL=$LOG_LEVEL

  proxy-build:
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.proxy.deb
      args:
        DOCKER_GO_VERSION: $DOCKER_GO_VERSION
      labels:
        com.photo-storage.go.version: $DOCKER_GO_VERSION
    volumes:
      - ../proxy_service:/app

volumes:
  bundler-data:
    name: bundler_data
    external: true

  # ssh-data:
  #    external:
  #      name: ssh_data

  pg-data:
    driver: local

  redis-data:
    driver: local

networks:
  frontend:
    name: frontend
    external: true
